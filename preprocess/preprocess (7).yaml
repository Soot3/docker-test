name: Preprocessing
outputs:
- {name: data, type: String}
implementation:
  container:
    image: tensorflow/tensorflow:latest-gpu-py3
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'pandas==0.23.4' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'pandas==0.23.4' --user) && "$0" "$@"
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      echo -n "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - "def _make_parent_dirs_and_return_path(file_path: str):\n    import os\n   \
      \ os.makedirs(os.path.dirname(file_path), exist_ok=True)\n    return file_path\n\
      \ndef preprocessing(data_path):\n    import sys, subprocess;\n    subprocess.run([sys.executable,\
      \ '-m', 'pip', 'install', 'pandas==0.23.4'])\n    subprocess.run([sys.executable,\
      \ '-m', 'pip', 'install', 'scikit-learn==0.22'])\n    import numpy as np\n \
      \   import pandas as pd\n    import pickle\n\n    from sklearn.preprocessing\
      \ import LabelEncoder, RobustScaler\n    from sklearn.model_selection import\
      \ train_test_split\n\n    df = pd.read_csv(\"https://raw.githubusercontent.com/Soot3/testing/master/cell2celltrain.csv\"\
      ,engine='python', encoding='utf-8', error_bad_lines=False)\n    df.dropna(inplace=True)\n\
      \    features1= ['ActiveSubs','DroppedBlockedCalls','HandsetModels','OutboundCalls','OffPeakCallsInOut','OverageMinutes','PeakCallsInOut','ReceivedCalls','RetentionOffersAccepted','CustomerID']\n\
      \    df.drop(columns=features1, inplace=True)\n    df.dropna(inplace=True)\n\
      \    # Imputting the mean price instead of Unknown\n    df['HandsetPrice'] =\
      \ df['HandsetPrice'].replace('Unknown',82.24)\n    df['HandsetPrice']=df['HandsetPrice'].astype(float)\n\
      \    dum = pd.get_dummies(df[['CreditRating', 'Occupation', 'MaritalStatus']],\
      \ drop_first=True)\n    objects = df.select_dtypes('object').columns.tolist()\n\
      \    le = LabelEncoder()\n    df[objects] = df[objects].apply(le.fit_transform)\
      \ \n    df = pd.concat([df,dum], axis = 1)\n     # selecting features, X\n \
      \   x = df.drop(columns=['Churn','NewCellphoneUser','HandsetRefurbished','ChildrenInHH','NotNewCellphoneUser','TruckOwner','OwnsComputer','HandsetWebCapable','RespondsToMailOffers','Homeownership','BuysViaMailOrder',\n\
      \    'HasCreditCard','RVOwner','ReferralsMadeBySubscriber','NonUSTravel','RetentionCalls','AdjustmentsToCreditRating','MadeCallToRetentionTeam','OwnsMotorcycle','OptOutMailings','CallForwardingCalls',\
      \ 'CreditRating', 'Occupation', 'MaritalStatus'])\n     # selecting labels,\
      \ y\n    y = df['Churn']\n     # using the Robust Scaler because of the outliers\
      \ in our dataset\n    scaler = RobustScaler()\n    X = scaler.fit_transform(x.astype(float))\n\
      \    X_train, X_test, Y_train, Y_test = train_test_split(X, y, test_size=0.3,\
      \ random_state=9)\n    data = {\"train\": {\"X\": X_train, \"y\": Y_train},\"\
      test\": {\"X\": X_test, \"y\": Y_test},\"features\":X}\n    with open(data_path,'wb')\
      \ as f:\n        pickle.dump((data),f)\n\n    return (print('Done!'))\n\nimport\
      \ argparse\n_parser = argparse.ArgumentParser(prog='Preprocessing', description='')\n\
      _parser.add_argument(\"--data\", dest=\"data_path\", type=_make_parent_dirs_and_return_path,\
      \ required=True, default=argparse.SUPPRESS)\n_parsed_args = vars(_parser.parse_args())\n\
      \n_outputs = preprocessing(**_parsed_args)\n"
    args:
    - --data
    - {outputPath: data}
